package in.handyman.raven.lib;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import in.handyman.raven.exception.HandymanException;
import in.handyman.raven.lambda.action.ActionExecution;
import in.handyman.raven.lambda.action.IActionExecution;
import in.handyman.raven.lambda.doa.audit.ActionExecutionAudit;
import in.handyman.raven.lib.model.PixelTextContentExtraction;
import okhttp3.*;
import org.slf4j.Logger;
import org.slf4j.Marker;
import org.slf4j.MarkerFactory;

import java.util.concurrent.TimeUnit;

/**
 * Auto Generated By Raven
 */
@ActionExecution(
        actionName = "PixelTextContentExtraction"
)
public class PixelTextContentExtractionAction implements IActionExecution {
    private final ActionExecutionAudit action;

    private final Logger log;

    private final PixelTextContentExtraction pixelTextContentExtraction;

    private final ObjectMapper mapper = new ObjectMapper();
    private final Marker aMarker;

    private final String URI;

    private static final MediaType MediaTypeJSON = MediaType.parse("application/json; charset=utf-8");

    public PixelTextContentExtractionAction(final ActionExecutionAudit action, final Logger log,
                                            final Object pixelTextContentExtraction) {
        this.pixelTextContentExtraction = (PixelTextContentExtraction) pixelTextContentExtraction;
        this.action = action;
        this.log = log;
        this.aMarker = MarkerFactory.getMarker(" PixelTextContentExtraction:" + this.pixelTextContentExtraction.getName());
        this.URI = action.getContext().get("copro.pixel-data-extraction.url");
    }

    @Override
    public void execute() throws Exception {

        log.info(aMarker, "<-------Pixel text content extraction Action for {} has been started------->" + pixelTextContentExtraction.getName());
        final OkHttpClient httpclient = new OkHttpClient.Builder()
                .connectTimeout(10, TimeUnit.MINUTES)
                .writeTimeout(10, TimeUnit.MINUTES)
                .readTimeout(10, TimeUnit.MINUTES)
                .build();

        final ObjectNode objectNode = mapper.createObjectNode();

        objectNode.put("inputFilePath", pixelTextContentExtraction.getInputFilePath());

        log.info(aMarker, " Input variables id : {}", action.getActionId());
        Request request = new Request.Builder().url(URI)
                .post(RequestBody.create(objectNode.toString(), MediaTypeJSON)).build();

        log.debug(aMarker, "Request has been build with the parameters \n URI : {} \n Input-File-Path : {} ", URI, pixelTextContentExtraction.getInputFilePath());
        String name = pixelTextContentExtraction.getName() + "_response";
        log.debug(aMarker, "The Request Details: {}", request);
        try (Response response = httpclient.newCall(request).execute()) {
            String responseBody = response.body().string();
            if (response.isSuccessful()) {
                action.getContext().put(name, responseBody);
                action.getContext().put(name.concat(".error"), "false");
                log.info(aMarker, "The Successful Response for {} --> {}", name, responseBody);
            } else {
                action.getContext().put(name.concat(".error"), "true");
                action.getContext().put(name.concat(".errorMessage"), responseBody);
                log.info(aMarker, "The Failure Response {} --> {}", name, responseBody);
            }
            log.info(aMarker, "<-------Pixel text content extraction Action for {} has been completed------->" + pixelTextContentExtraction.getName());
        } catch (Exception e) {
            action.getContext().put(name.concat(".error"), "true");
            action.getContext().put(name.concat(".errorMessage"), e.getMessage());
            log.info(aMarker, "The Exception occurred ", e);
            throw new HandymanException("Failed to execute", e);
        }
    }

    @Override
    public boolean executeIf() throws Exception {
        return pixelTextContentExtraction.getCondition();
    }
}
