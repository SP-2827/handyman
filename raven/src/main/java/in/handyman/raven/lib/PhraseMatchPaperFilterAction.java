package in.handyman.raven.lib;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import in.handyman.raven.exception.HandymanException;
import in.handyman.raven.lambda.access.ResourceAccess;
import in.handyman.raven.lambda.action.ActionExecution;
import in.handyman.raven.lambda.action.IActionExecution;
import in.handyman.raven.lambda.doa.audit.ActionExecutionAudit;
import in.handyman.raven.lib.model.PhraseMatchPaperFilter;

import java.lang.Exception;
import java.lang.Object;
import java.lang.Override;
import java.util.Objects;
import java.util.Optional;
import java.util.concurrent.TimeUnit;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import okhttp3.*;
import org.jdbi.v3.core.Jdbi;
import org.json.JSONArray;
import org.json.JSONObject;
import org.slf4j.Logger;
import org.slf4j.Marker;
import org.slf4j.MarkerFactory;

/**
 * Auto Generated By Raven
 */
@ActionExecution(
        actionName = "PhraseMatchPaperFilter"
)
public class PhraseMatchPaperFilterAction implements IActionExecution {
    private final ActionExecutionAudit action;

    private final Logger log;

    private final PhraseMatchPaperFilter phraseMatchPaperFilter;

    private final Marker aMarker;

    private final ObjectMapper mapper = new ObjectMapper();
    private final String URI;

    private static final MediaType MediaTypeJSON = MediaType
            .parse("application/json; charset=utf-8");

    public PhraseMatchPaperFilterAction(final ActionExecutionAudit action, final Logger log,
                                        final Object phraseMatchPaperFilter) {
        this.phraseMatchPaperFilter = (PhraseMatchPaperFilter) phraseMatchPaperFilter;
        this.action = action;
        this.log = log;
        this.aMarker = MarkerFactory.getMarker(" PhraseMatchPaperFilter:" + this.phraseMatchPaperFilter.getName());
        this.URI = action.getContext().get("copro.paper-filtering-phrase-match.url");

    }

    @Override
    public void execute() throws Exception {
        final Jdbi jdbi = ResourceAccess.rdbmsJDBIConn(phraseMatchPaperFilter.getResourceConn());
        log.info(aMarker, "<-------Phrase match paper filter Action for {} has been started------->", phraseMatchPaperFilter.getName());
        final OkHttpClient httpclient = new OkHttpClient.Builder()
                .connectTimeout(10, TimeUnit.MINUTES)
                .writeTimeout(10, TimeUnit.MINUTES)
                .readTimeout(10, TimeUnit.MINUTES)
                .build();

        final ObjectNode objectNode = mapper.createObjectNode();

        objectNode.put("pageContent", phraseMatchPaperFilter.getPageContent());
        objectNode.set("keysToFilter", mapper.readTree(phraseMatchPaperFilter.getKeysToFilter()));

        log.info(aMarker, " Input variables id : {}", action.getActionId());
        Request request = new Request.Builder().url(URI)
                .post(RequestBody.create(objectNode.toString(), MediaTypeJSON)).build();

        log.debug(aMarker, "Request has been build with the parameters \n URI : {} \n page content : {} \n key-filters : {} ", URI, phraseMatchPaperFilter.getPageContent(), phraseMatchPaperFilter.getKeysToFilter());

        String name = phraseMatchPaperFilter.getName() + "_response";
        log.debug(aMarker, "The Request Details: {}", request);
        try (Response response = httpclient.newCall(request).execute()) {
            String responseBody = Objects.requireNonNull(response.body()).string();
            if (response.isSuccessful()) {
                JSONArray responseArray = new JSONArray(responseBody);
                final Integer paperNo = Optional.ofNullable(phraseMatchPaperFilter.getPaperNo()).map(String::valueOf).map(Integer::parseInt).orElse(null);

                responseArray.forEach(entry -> {
                    JSONObject responseObject = new JSONObject(String.valueOf(entry));
                    if (!responseObject.isEmpty()) {
                        final PhraseMatchPaperFilterAction.PaperFilteringPhraseMatchTable phraseMatchFilteringResultTable = PaperFilteringPhraseMatchTable
                                .builder()
                                .originId(Optional.ofNullable(phraseMatchPaperFilter.getOriginId()).map(String::valueOf).orElse(null))
                                .groupId(Optional.ofNullable(phraseMatchPaperFilter.getGroupId()).map(String::valueOf).orElse(null))
//                                .pageContent(Optional.ofNullable(responseObject.get("page_content")).map(String::valueOf).orElse(null))
                                .entity(Optional.ofNullable(responseObject.get("entity")).map(String::valueOf).orElse(null))
                                .isKeyPresent(Optional.ofNullable(responseObject.get("isKeyPresent")).map(String::valueOf).orElse(null))
                                .paperNo(paperNo)
                                .build();
                        jdbi.useTransaction(handle -> {
                            handle.createUpdate("INSERT INTO paper.phrase_match_filtering_result(origin_id,group_id,paper_no,entity,is_key_present, created_on)" +
                                            " select :originId,:groupId,:paperNo,:entity,:isKeyPresent,now();")
                                    .bindBean(phraseMatchFilteringResultTable)
                                    .execute();
                        });
                    }

                });
                action.getContext().put(name.concat(".error"), "false");
                log.info(aMarker, "The Successful Response for {} --> {}", name, responseBody);
            } else {
                action.getContext().put(name.concat(".error"), "true");
                action.getContext().put(name.concat(".errorMessage"), responseBody);
                log.info(aMarker, "The Failure Response {} --> {}", name, responseBody);
            }
            log.info(aMarker, "<-------Text Filtering Action for {} has been completed ------->", phraseMatchPaperFilter.getName());
        } catch (Exception e) {
            action.getContext().put(name.concat(".error"), "true");
            action.getContext().put(name.concat(".errorMessage"), e.getMessage());
            log.info(aMarker, "The Exception occurred ", e);
            throw new HandymanException("Failed to execute", e);
        }

    }

    @Override
    public boolean executeIf() throws Exception {
        return phraseMatchPaperFilter.getCondition();
    }

    @Data
    @AllArgsConstructor
    @NoArgsConstructor
    @Builder
    public static class PaperFilteringPhraseMatchTable {
        private String originId;
        private Integer paperNo;
        private String groupId;
        private String entity;
        private String isKeyPresent;

    }
}
